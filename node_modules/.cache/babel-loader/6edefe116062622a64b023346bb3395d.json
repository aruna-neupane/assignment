{"ast":null,"code":"import { NotificationError } from \"../../../common/component/notificationError\";\nimport * as actionType from './action-type';\nimport axios from 'axios';\n\nconst setUser = payload => ({\n  type: actionType.USER_DATA,\n  payload\n});\n\nconst setList = payload => ({\n  type: actionType.USER_LIST,\n  payload\n});\n\nconst setTitle = payload => ({\n  type: actionType.SET_PAGE,\n  payload\n});\n\nexport const getUser = () => dispatch => new Promise((resolve, reject) => {\n  // dispatch(startLoadingAction());\n  // let res=[];\n  //     let list=[];\n  //     axios.get('https://panorbit.in/api/users.json')\n  //     .then((response) => {  \n  //     list= response.data.users.filter(item => item.id != this.props.match.params.id)  \n  //     res = response.data.users.filter(item => item.id == this.props.match.params.id)\n  //     const data= res[0]\n  //     resolve(data, list)\n  //     }),\n  //     (error) => {\n  //         // dispatch(finishLoadingAction());\n  //         dispatch(NotificationError());\n  //         reject(error);\n  //     }\n  axios.get(\"https://panorbit.in/api/users.json\").then(response => {\n    list = response.data.users.filter(item => item.id != this.props.match.params.id); //     res = response.data.users.filter(item => item.id == this.props.match.params.id)\n\n    dispatch(setList(response.data));\n    resolve(response.data);\n  }, error => {\n    alert(error);\n    reject();\n  });\n});\nexport const getTitle = params => dispatch => new Promise((resolve, reject) => {\n  // dispatch(startLoadingAction());\n  let res = [];\n  let list = [];\n  axios.get('https://panorbit.in/api/users.json', params).then(response => {\n    list = response.data.users.filter(item => item.id != this.props.match.params.id);\n    res = response.data.users.filter(item => item.id == this.props.match.params.id);\n  }).then(() => {\n    this.setState({\n      data: res[0],\n      list\n    });\n  }), error => {\n    // dispatch(finishLoadingAction());\n    dispatch(NotificationError());\n    reject(error);\n  };\n});","map":{"version":3,"sources":["D:/react-app/inspiring-lab-project/src/modules/home/store/action.js"],"names":["NotificationError","actionType","axios","setUser","payload","type","USER_DATA","setList","USER_LIST","setTitle","SET_PAGE","getUser","dispatch","Promise","resolve","reject","get","then","response","list","data","users","filter","item","id","props","match","params","error","alert","getTitle","res","setState"],"mappings":"AAAA,SAASA,iBAAT,QAAkC,6CAAlC;AACA,OAAO,KAAKC,UAAZ,MAA4B,eAA5B;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,OAAO,GAAGC,OAAO,KAAK;AACxBC,EAAAA,IAAI,EAAEJ,UAAU,CAACK,SADO;AAExBF,EAAAA;AAFwB,CAAL,CAAvB;;AAIA,MAAMG,OAAO,GAAGH,OAAO,KAAK;AACxBC,EAAAA,IAAI,EAAEJ,UAAU,CAACO,SADO;AAExBJ,EAAAA;AAFwB,CAAL,CAAvB;;AAKA,MAAMK,QAAQ,GAAGL,OAAO,KAAK;AACzBC,EAAAA,IAAI,EAAEJ,UAAU,CAACS,QADQ;AAEzBN,EAAAA;AAFyB,CAAL,CAAxB;;AAKA,OAAO,MAAMO,OAAO,GAAG,MAAMC,QAAQ,IACrC,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIb,EAAAA,KAAK,CAACc,GAAN,CAAU,oCAAV,EAAgDC,IAAhD,CACGC,QAAD,IAAc;AACZC,IAAAA,IAAI,GAAED,QAAQ,CAACE,IAAT,CAAcC,KAAd,CAAoBC,MAApB,CAA2BC,IAAI,IAAIA,IAAI,CAACC,EAAL,IAAW,KAAKC,KAAL,CAAWC,KAAX,CAAiBC,MAAjB,CAAwBH,EAAtE,CAAN,CADY,CAEZ;;AACAZ,IAAAA,QAAQ,CAACL,OAAO,CAACW,QAAQ,CAACE,IAAV,CAAR,CAAR;AACAN,IAAAA,OAAO,CAACI,QAAQ,CAACE,IAAV,CAAP;AACD,GANH,EAOGQ,KAAD,IAAW;AACTC,IAAAA,KAAK,CAACD,KAAD,CAAL;AACAb,IAAAA,MAAM;AACP,GAVH;AAYH,CA5BL,CADO;AA+BP,OAAO,MAAMe,QAAQ,GAAIH,MAAD,IAAYf,QAAQ,IAAI,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC7E;AACA,MAAIgB,GAAG,GAAC,EAAR;AACI,MAAIZ,IAAI,GAAC,EAAT;AACAjB,EAAAA,KAAK,CAACc,GAAN,CACI,oCADJ,EAEIW,MAFJ,EAICV,IAJD,CAIOC,QAAD,IAAc;AACpBC,IAAAA,IAAI,GAAED,QAAQ,CAACE,IAAT,CAAcC,KAAd,CAAoBC,MAApB,CAA2BC,IAAI,IAAIA,IAAI,CAACC,EAAL,IAAW,KAAKC,KAAL,CAAWC,KAAX,CAAiBC,MAAjB,CAAwBH,EAAtE,CAAN;AACAO,IAAAA,GAAG,GAAGb,QAAQ,CAACE,IAAT,CAAcC,KAAd,CAAoBC,MAApB,CAA2BC,IAAI,IAAIA,IAAI,CAACC,EAAL,IAAW,KAAKC,KAAL,CAAWC,KAAX,CAAiBC,MAAjB,CAAwBH,EAAtE,CAAN;AACC,GAPD,EAOGP,IAPH,CAOQ,MAAI;AACR,SAAKe,QAAL,CAAc;AACVZ,MAAAA,IAAI,EAAEW,GAAG,CAAC,CAAD,CADC;AAEVZ,MAAAA;AAFU,KAAd;AAIH,GAZD,GAaCS,KAAD,IAAW;AACP;AACAhB,IAAAA,QAAQ,CAACZ,iBAAiB,EAAlB,CAAR;AACAe,IAAAA,MAAM,CAACa,KAAD,CAAN;AACH,GAjBD;AAkBP,CAtB+C,CAAzC","sourcesContent":["import { NotificationError } from \"../../../common/component/notificationError\";\r\nimport * as actionType from './action-type'\r\nimport axios from 'axios';\r\n\r\nconst setUser = payload => ({\r\n    type: actionType.USER_DATA,\r\n    payload,\r\n  });\r\nconst setList = payload => ({\r\n    type: actionType.USER_LIST,\r\n    payload,\r\n})\r\n\r\nconst setTitle = payload => ({\r\n    type: actionType.SET_PAGE,\r\n    payload,\r\n  });\r\n\r\nexport const getUser = () => dispatch => \r\nnew Promise((resolve, reject) => {\r\n    // dispatch(startLoadingAction());\r\n    // let res=[];\r\n    //     let list=[];\r\n    //     axios.get('https://panorbit.in/api/users.json')\r\n    //     .then((response) => {  \r\n    //     list= response.data.users.filter(item => item.id != this.props.match.params.id)  \r\n    //     res = response.data.users.filter(item => item.id == this.props.match.params.id)\r\n    //     const data= res[0]\r\n    //     resolve(data, list)\r\n    //     }),\r\n    //     (error) => {\r\n    //         // dispatch(finishLoadingAction());\r\n    //         dispatch(NotificationError());\r\n    //         reject(error);\r\n    //     }\r\n        axios.get(\"https://panorbit.in/api/users.json\").then(\r\n          (response) => {\r\n            list= response.data.users.filter(item => item.id != this.props.match.params.id)  \r\n            //     res = response.data.users.filter(item => item.id == this.props.match.params.id)\r\n            dispatch(setList(response.data));\r\n            resolve(response.data);\r\n          },\r\n          (error) => {\r\n            alert(error);\r\n            reject();\r\n          }\r\n        );\r\n    });\r\n\r\nexport const getTitle = (params) => dispatch => new Promise((resolve, reject) => {\r\n    // dispatch(startLoadingAction());\r\n    let res=[];\r\n        let list=[];\r\n        axios.get(\r\n            'https://panorbit.in/api/users.json',\r\n            params\r\n            )\r\n        .then((response) => {  \r\n        list= response.data.users.filter(item => item.id != this.props.match.params.id)  \r\n        res = response.data.users.filter(item => item.id == this.props.match.params.id)\r\n        }).then(()=>{\r\n            this.setState({\r\n                data: res[0],\r\n                list,\r\n            })\r\n        }),\r\n        (error) => {\r\n            // dispatch(finishLoadingAction());\r\n            dispatch(NotificationError());\r\n            reject(error);\r\n        }\r\n});"]},"metadata":{},"sourceType":"module"}