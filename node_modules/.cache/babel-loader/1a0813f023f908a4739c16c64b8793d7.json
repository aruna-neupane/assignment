{"ast":null,"code":"var _jsxFileName = \"D:\\\\react-app\\\\inspiring-lab-project\\\\src\\\\app\\\\login\\\\login.js\";\n// import React, { Component, Fragment } from 'react';\n// import { Row, Col } from 'antd';\n// import './../../assets/css/style.css';\n// import Logo from './../../modules/login/component/logo'\n// import LoginForm from './../../modules/login/component/form'\n// import logo from './../../assets/images/logo.png'\n// import { getFormValues, submit, SubmissionError } from 'redux-form';\n// import { connect } from 'react-redux';\n// class login extends Component {\n//     constructor(props) {\n//         super(props);\n//     }\n//     onSubmitForm = (values) => {\n//         console.log('Submitted values are: ', JSON.stringify(this.props.formValue));\n//         // const { pocketRemoteService, cookies } = this.props;\n//         // const { locale } = this.state;\n//         //   const { username, password } = params;\n//         //   const request = {\n//         //     clientId: CLIENT_ID,\n//         //     clientSecret: CLIENT_SECRET,\n//         //     username,\n//         //     password,\n//         //   };\n//         //   const loginInfo = {\n//         //     checked: this.state.checked,\n//         //     username: this.state.checked === false ? '' : this.state.username,\n//         //   };\n//         //   localStorage.setItem('login-info', JSON.stringify(loginInfo));\n//         //   this.props.ssoAuthenticate(pocketRemoteService, request, cookies, locale);\n//         };\n//          submit(values) {\n//             return sleep(1000).then(() => {\n//               // simulate server latency\n//               if (!['john', 'paul', 'george', 'ringo'].includes(values.username)) {\n//                 throw new SubmissionError({\n//                   username: 'User does not exist',\n//                   _error: 'Login failed!'\n//                 })\n//               } else if (values.password !== 'redux-form') {\n//                 throw new SubmissionError({\n//                   password: 'Wrong password',\n//                   _error: 'Login failed!'\n//                 })\n//               } else {\n//                 window.alert(`You submitted:\\n\\n${JSON.stringify(values, null, 2)}`)\n//               }\n//             })\n//           }\n//     render() {\n//         const values = this.props.formValue\n//         const validate = () => {\n//             const errors = {}\n//             if (!values.username) {\n//               errors.username = 'Required'\n//             } else if (values.username.length > 15) {\n//               errors.username = 'Must be 15 characters or less'\n//             }\n//             if (!values.email) {\n//               errors.email = 'Required'\n//             } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n//               errors.email = 'Invalid email address'\n//             }\n//             if (!values.age) {\n//               errors.age = 'Required'\n//             } else if (isNaN(Number(values.age))) {\n//               errors.age = 'Must be a number'\n//             } else if (Number(values.age) < 18) {\n//               errors.age = 'Sorry, you must be at least 18 years old'\n//             }\n//             return errors\n//           }\n//           const warn = () => {\n//             const warnings = {}\n//             if (values.age < 19) {\n//               warnings.age = 'Hmm, you seem a bit young...'\n//             }\n//             return warnings\n//           }\n//          console.log(JSON.stringify(this.props.formValue))\n//         return (\n//             <div className=\"login-page\">\n//                 <div className=\"container-row\">\n//                     <div span={10} className=\"first-div\">\n//                         <Logo/>\n//                     </div>\n//                     <div span={10} className=\"second-div\">\n//                         <LoginForm\n//                         handleSubmit={this.onSubmitForm}\n//                         inititalValue={this.props.login.initialFormData} \n//                         />\n//                     </div>\n//                 </div>\n//             </div>\n//         );\n//     }\n// }\n// const mapStateToProps = (state) => {\n//     const { login } = state;\n//     return {\n//         login,\n//         formValue: getFormValues('login-form')(state),\n//     };\n// };\n// const mapDispatchToProps = (dispatch => ({\n//     // navigate,\n//     // actionButtonSubmit,\n//     // change,\n//     // addBranch,\n//     // touch,\n//     // reset,\n//     // destroy,\n// }))();\n// export default connect(mapStateToProps, mapDispatchToProps)(login);\nimport React from 'react';\nimport { Field, reduxForm } from 'redux-form';\n\nconst validate = values => {\n  const errors = {};\n\n  if (!values.username) {\n    errors.username = 'Required';\n  } else if (values.username.length > 15) {\n    errors.username = 'Must be 15 characters or less';\n  }\n\n  if (!values.email) {\n    errors.email = 'Required';\n  } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n    errors.email = 'Invalid email address';\n  }\n\n  if (!values.age) {\n    errors.age = 'Required';\n  } else if (isNaN(Number(values.age))) {\n    errors.age = 'Must be a number';\n  } else if (Number(values.age) < 18) {\n    errors.age = 'Sorry, you must be at least 18 years old';\n  }\n\n  return errors;\n};\n\nconst warn = values => {\n  const warnings = {};\n\n  if (values.age < 19) {\n    warnings.age = 'Hmm, you seem a bit young...';\n  }\n\n  return warnings;\n};\n\nconst renderField = ({\n  input,\n  label,\n  type,\n  meta: {\n    touched,\n    error,\n    warning\n  }\n}) => /*#__PURE__*/React.createElement(\"div\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 164,\n    columnNumber: 3\n  }\n}, /*#__PURE__*/React.createElement(\"label\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 165,\n    columnNumber: 5\n  }\n}, label), /*#__PURE__*/React.createElement(\"div\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 166,\n    columnNumber: 5\n  }\n}, /*#__PURE__*/React.createElement(\"input\", Object.assign({}, input, {\n  placeholder: label,\n  type: type,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 167,\n    columnNumber: 7\n  }\n})), touched && (error && /*#__PURE__*/React.createElement(\"span\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 169,\n    columnNumber: 20\n  }\n}, error) || warning && /*#__PURE__*/React.createElement(\"span\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 170,\n    columnNumber: 23\n  }\n}, warning))));\n\nconst SyncValidationForm = props => {\n  const {\n    handleSubmit,\n    pristine,\n    reset,\n    submitting\n  } = props;\n  return /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Field, {\n    name: \"username\",\n    type: \"text\",\n    component: renderField,\n    label: \"Username\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Field, {\n    name: \"email\",\n    type: \"email\",\n    component: renderField,\n    label: \"Email\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Field, {\n    name: \"age\",\n    type: \"number\",\n    component: renderField,\n    label: \"Age\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    disabled: submitting,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 9\n    }\n  }, \"Submit\"), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    disabled: pristine || submitting,\n    onClick: reset,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 9\n    }\n  }, \"Clear Values\")));\n};\n\nexport default reduxForm({\n  form: 'syncValidation',\n  // a unique identifier for this form\n  validate,\n  // <--- validation function given to redux-form\n  warn // <--- warning function given to redux-form\n\n})(SyncValidationForm);","map":{"version":3,"sources":["D:/react-app/inspiring-lab-project/src/app/login/login.js"],"names":["React","Field","reduxForm","validate","values","errors","username","length","email","test","age","isNaN","Number","warn","warnings","renderField","input","label","type","meta","touched","error","warning","SyncValidationForm","props","handleSubmit","pristine","reset","submitting","form"],"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","sourcesContent":["// import React, { Component, Fragment } from 'react';\r\n// import { Row, Col } from 'antd';\r\n// import './../../assets/css/style.css';\r\n// import Logo from './../../modules/login/component/logo'\r\n// import LoginForm from './../../modules/login/component/form'\r\n// import logo from './../../assets/images/logo.png'\r\n// import { getFormValues, submit, SubmissionError } from 'redux-form';\r\n// import { connect } from 'react-redux';\r\n\r\n// class login extends Component {\r\n//     constructor(props) {\r\n//         super(props);\r\n        \r\n//     }\r\n    \r\n//     onSubmitForm = (values) => {\r\n//         console.log('Submitted values are: ', JSON.stringify(this.props.formValue));\r\n//         // const { pocketRemoteService, cookies } = this.props;\r\n//         // const { locale } = this.state;\r\n//         //   const { username, password } = params;\r\n//         //   const request = {\r\n//         //     clientId: CLIENT_ID,\r\n//         //     clientSecret: CLIENT_SECRET,\r\n//         //     username,\r\n//         //     password,\r\n//         //   };\r\n    \r\n//         //   const loginInfo = {\r\n//         //     checked: this.state.checked,\r\n//         //     username: this.state.checked === false ? '' : this.state.username,\r\n//         //   };\r\n    \r\n//         //   localStorage.setItem('login-info', JSON.stringify(loginInfo));\r\n    \r\n//         //   this.props.ssoAuthenticate(pocketRemoteService, request, cookies, locale);\r\n//         };\r\n//          submit(values) {\r\n//             return sleep(1000).then(() => {\r\n//               // simulate server latency\r\n//               if (!['john', 'paul', 'george', 'ringo'].includes(values.username)) {\r\n//                 throw new SubmissionError({\r\n//                   username: 'User does not exist',\r\n//                   _error: 'Login failed!'\r\n//                 })\r\n//               } else if (values.password !== 'redux-form') {\r\n//                 throw new SubmissionError({\r\n//                   password: 'Wrong password',\r\n//                   _error: 'Login failed!'\r\n//                 })\r\n//               } else {\r\n//                 window.alert(`You submitted:\\n\\n${JSON.stringify(values, null, 2)}`)\r\n//               }\r\n//             })\r\n//           }\r\n//     render() {\r\n//         const values = this.props.formValue\r\n//         const validate = () => {\r\n//             const errors = {}\r\n//             if (!values.username) {\r\n//               errors.username = 'Required'\r\n//             } else if (values.username.length > 15) {\r\n//               errors.username = 'Must be 15 characters or less'\r\n//             }\r\n//             if (!values.email) {\r\n//               errors.email = 'Required'\r\n//             } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n//               errors.email = 'Invalid email address'\r\n//             }\r\n//             if (!values.age) {\r\n//               errors.age = 'Required'\r\n//             } else if (isNaN(Number(values.age))) {\r\n//               errors.age = 'Must be a number'\r\n//             } else if (Number(values.age) < 18) {\r\n//               errors.age = 'Sorry, you must be at least 18 years old'\r\n//             }\r\n//             return errors\r\n//           }\r\n          \r\n//           const warn = () => {\r\n//             const warnings = {}\r\n//             if (values.age < 19) {\r\n//               warnings.age = 'Hmm, you seem a bit young...'\r\n//             }\r\n//             return warnings\r\n//           }\r\n//          console.log(JSON.stringify(this.props.formValue))\r\n//         return (\r\n//             <div className=\"login-page\">\r\n//                 <div className=\"container-row\">\r\n//                     <div span={10} className=\"first-div\">\r\n//                         <Logo/>\r\n//                     </div>\r\n//                     <div span={10} className=\"second-div\">\r\n//                         <LoginForm\r\n//                         handleSubmit={this.onSubmitForm}\r\n//                         inititalValue={this.props.login.initialFormData} \r\n                        \r\n//                         />\r\n//                     </div>\r\n//                 </div>\r\n//             </div>\r\n//         );\r\n//     }\r\n// }\r\n// const mapStateToProps = (state) => {\r\n//     const { login } = state;\r\n//     return {\r\n//         login,\r\n//         formValue: getFormValues('login-form')(state),\r\n//     };\r\n// };\r\n\r\n// const mapDispatchToProps = (dispatch => ({\r\n//     // navigate,\r\n//     // actionButtonSubmit,\r\n//     // change,\r\n//     // addBranch,\r\n//     // touch,\r\n//     // reset,\r\n//     // destroy,\r\n// }))();\r\n\r\n// export default connect(mapStateToProps, mapDispatchToProps)(login);\r\n\r\nimport React from 'react'\r\nimport { Field, reduxForm } from 'redux-form'\r\n\r\nconst validate = values => {\r\n  const errors = {}\r\n  if (!values.username) {\r\n    errors.username = 'Required'\r\n  } else if (values.username.length > 15) {\r\n    errors.username = 'Must be 15 characters or less'\r\n  }\r\n  if (!values.email) {\r\n    errors.email = 'Required'\r\n  } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n    errors.email = 'Invalid email address'\r\n  }\r\n  if (!values.age) {\r\n    errors.age = 'Required'\r\n  } else if (isNaN(Number(values.age))) {\r\n    errors.age = 'Must be a number'\r\n  } else if (Number(values.age) < 18) {\r\n    errors.age = 'Sorry, you must be at least 18 years old'\r\n  }\r\n  return errors\r\n}\r\n\r\nconst warn = values => {\r\n  const warnings = {}\r\n  if (values.age < 19) {\r\n    warnings.age = 'Hmm, you seem a bit young...'\r\n  }\r\n  return warnings\r\n}\r\n\r\nconst renderField = ({\r\n  input,\r\n  label,\r\n  type,\r\n  meta: { touched, error, warning }\r\n}) => (\r\n  <div>\r\n    <label>{label}</label>\r\n    <div>\r\n      <input {...input} placeholder={label} type={type} />\r\n      {touched &&\r\n        ((error && <span>{error}</span>) ||\r\n          (warning && <span>{warning}</span>))}\r\n    </div>\r\n  </div>\r\n)\r\n\r\nconst SyncValidationForm = props => {\r\n  const { handleSubmit, pristine, reset, submitting } = props\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <Field\r\n        name=\"username\"\r\n        type=\"text\"\r\n        component={renderField}\r\n        label=\"Username\"\r\n      />\r\n      <Field name=\"email\" type=\"email\" component={renderField} label=\"Email\" />\r\n      <Field name=\"age\" type=\"number\" component={renderField} label=\"Age\" />\r\n      <div>\r\n        <button type=\"submit\" disabled={submitting}>\r\n          Submit\r\n        </button>\r\n        <button type=\"button\" disabled={pristine || submitting} onClick={reset}>\r\n          Clear Values\r\n        </button>\r\n      </div>\r\n    </form>\r\n  )\r\n}\r\n\r\nexport default reduxForm({\r\n  form: 'syncValidation', // a unique identifier for this form\r\n  validate, // <--- validation function given to redux-form\r\n  warn // <--- warning function given to redux-form\r\n})(SyncValidationForm)"]},"metadata":{},"sourceType":"module"}