{"ast":null,"code":"var _jsxFileName = \"D:\\\\react-app\\\\inspiring-lab-project\\\\src\\\\app\\\\login\\\\login.js\";\nimport React, { Component, Fragment } from 'react';\nimport { Row, Col, notification } from 'antd';\nimport './../../assets/css/style.css';\nimport Logo from './../../modules/login/component/logo';\nimport LoginForm from './../../modules/login/component/form';\nimport logo from './../../assets/images/logo.png';\nimport { getFormValues, submit, SubmissionError } from 'redux-form';\nimport { connect } from 'react-redux';\nimport { Notification } from '../../common/component/notification';\nimport auth from '../../common/router/authentication';\nimport { getUserlogin } from './../../modules/login/store/action';\n\nclass login extends Component {\n  constructor(props) {\n    super(props);\n\n    this.onSubmit = formValues => {\n      console.log(formValues); // Notification('topRight');\n      // if successful\n\n      if (formValues.username == 'Aruna' && formValues.password == 'aruna') {\n        auth.login(() => {\n          this.props.history.push('/profile');\n        });\n      } else {\n        alert('invalid username/password');\n      }\n    };\n\n    this.required = value => value ? undefined : 'Required';\n  } // onSubmitForm = (values) => {\n  //     console.log('Submitted values are: ', JSON.stringify(this.props.formValue));\n  //     // const { pocketRemoteService, cookies } = this.props;\n  //     // const { locale } = this.state;\n  //     //   const { username, password } = params;\n  //     //   const request = {\n  //     //     clientId: CLIENT_ID,\n  //     //     clientSecret: CLIENT_SECRET,\n  //     //     username,\n  //     //     password,\n  //     //   };\n  //     //   const loginInfo = {\n  //     //     checked: this.state.checked,\n  //     //     username: this.state.checked === false ? '' : this.state.username,\n  //     //   };\n  //     //   localStorage.setItem('login-info', JSON.stringify(loginInfo));\n  //     //   this.props.ssoAuthenticate(pocketRemoteService, request, cookies, locale);\n  //     };\n  //  submit(values) {\n  //     return sleep(1000).then(() => {\n  //       // simulate server latency\n  //       if (!['john', 'paul', 'george', 'ringo'].includes(values.username)) {\n  //         throw new SubmissionError({\n  //           username: 'User does not exist',\n  //           _error: 'Login failed!'\n  //         })\n  //       } else if (values.password !== 'redux-form') {\n  //         throw new SubmissionError({\n  //           password: 'Wrong password',\n  //           _error: 'Login failed!'\n  //         })\n  //       } else {\n  //         window.alert(`You submitted:\\n\\n${JSON.stringify(values, null, 2)}`)\n  //       }\n  //     })\n  //   }\n\n\n  render() {\n    // const values = this.props.formValue\n    // const validate = () => {\n    //     const errors = {}\n    //     if (!values.username) {\n    //       errors.username = 'Required'\n    //     } else if (values.username.length > 15) {\n    //       errors.username = 'Must be 15 characters or less'\n    //     }\n    //     if (!values.email) {\n    //       errors.email = 'Required'\n    //     } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n    //       errors.email = 'Invalid email address'\n    //     }\n    //     if (!values.age) {\n    //       errors.age = 'Required'\n    //     } else if (isNaN(Number(values.age))) {\n    //       errors.age = 'Must be a number'\n    //     } else if (Number(values.age) < 18) {\n    //       errors.age = 'Sorry, you must be at least 18 years old'\n    //     }\n    //     return errors\n    //   }\n    //   const warn = () => {\n    //     const warnings = {}\n    //     if (values.age < 19) {\n    //       warnings.age = 'Hmm, you seem a bit young...'\n    //     }\n    //     return warnings\n    //   }\n    //  console.log(JSON.stringify(this.props.formValue))\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"login-page\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container-row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      span: 10,\n      className: \"first-div\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Logo, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 25\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      span: 10,\n      className: \"second-div\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(LoginForm // handleSubmit={this.onSubmitForm}\n    // inititalValue={this.props.login.initialFormData} \n    , {\n      required: this.required,\n      onSubmit: this.onSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 25\n      }\n    }))));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  const {\n    login\n  } = state;\n  return {\n    login,\n    formValue: getFormValues('login-form')(state)\n  };\n};\n\nconst mapDispatchToProps = (dispatch => ({}))();\n\nexport default connect(mapStateToProps, mapDispatchToProps)(login);","map":{"version":3,"sources":["D:/react-app/inspiring-lab-project/src/app/login/login.js"],"names":["React","Component","Fragment","Row","Col","notification","Logo","LoginForm","logo","getFormValues","submit","SubmissionError","connect","Notification","auth","getUserlogin","login","constructor","props","onSubmit","formValues","console","log","username","password","history","push","alert","required","value","undefined","render","mapStateToProps","state","formValue","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component, Fragment } from 'react';\r\nimport { Row, Col, notification } from 'antd';\r\nimport './../../assets/css/style.css';\r\nimport Logo from './../../modules/login/component/logo'\r\nimport LoginForm from './../../modules/login/component/form'\r\nimport logo from './../../assets/images/logo.png'\r\nimport { getFormValues, submit, SubmissionError } from 'redux-form';\r\nimport { connect } from 'react-redux';\r\nimport { Notification } from '../../common/component/notification';\r\nimport auth from '../../common/router/authentication';\r\nimport {getUserlogin } from './../../modules/login/store/action';\r\n\r\nclass login extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n    }\r\n    \r\n    // onSubmitForm = (values) => {\r\n    //     console.log('Submitted values are: ', JSON.stringify(this.props.formValue));\r\n    //     // const { pocketRemoteService, cookies } = this.props;\r\n    //     // const { locale } = this.state;\r\n    //     //   const { username, password } = params;\r\n    //     //   const request = {\r\n    //     //     clientId: CLIENT_ID,\r\n    //     //     clientSecret: CLIENT_SECRET,\r\n    //     //     username,\r\n    //     //     password,\r\n    //     //   };\r\n    \r\n    //     //   const loginInfo = {\r\n    //     //     checked: this.state.checked,\r\n    //     //     username: this.state.checked === false ? '' : this.state.username,\r\n    //     //   };\r\n    \r\n    //     //   localStorage.setItem('login-info', JSON.stringify(loginInfo));\r\n    \r\n    //     //   this.props.ssoAuthenticate(pocketRemoteService, request, cookies, locale);\r\n    //     };\r\n        //  submit(values) {\r\n        //     return sleep(1000).then(() => {\r\n        //       // simulate server latency\r\n        //       if (!['john', 'paul', 'george', 'ringo'].includes(values.username)) {\r\n        //         throw new SubmissionError({\r\n        //           username: 'User does not exist',\r\n        //           _error: 'Login failed!'\r\n        //         })\r\n        //       } else if (values.password !== 'redux-form') {\r\n        //         throw new SubmissionError({\r\n        //           password: 'Wrong password',\r\n        //           _error: 'Login failed!'\r\n        //         })\r\n        //       } else {\r\n        //         window.alert(`You submitted:\\n\\n${JSON.stringify(values, null, 2)}`)\r\n        //       }\r\n        //     })\r\n        //   }\r\n        onSubmit =(formValues) => {\r\n            console.log(formValues);\r\n            // Notification('topRight');\r\n            // if successful\r\n            if(formValues.username == 'Aruna' && formValues.password == 'aruna'){\r\n            auth.login(() => {\r\n            this.props.history.push('/profile')\r\n            })\r\n        }\r\n        else{\r\n            alert('invalid username/password')\r\n        }\r\n        }     \r\n       required = value => value ? undefined : 'Required'\r\n    render() {\r\n        // const values = this.props.formValue\r\n        // const validate = () => {\r\n        //     const errors = {}\r\n        //     if (!values.username) {\r\n        //       errors.username = 'Required'\r\n        //     } else if (values.username.length > 15) {\r\n        //       errors.username = 'Must be 15 characters or less'\r\n        //     }\r\n        //     if (!values.email) {\r\n        //       errors.email = 'Required'\r\n        //     } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n        //       errors.email = 'Invalid email address'\r\n        //     }\r\n        //     if (!values.age) {\r\n        //       errors.age = 'Required'\r\n        //     } else if (isNaN(Number(values.age))) {\r\n        //       errors.age = 'Must be a number'\r\n        //     } else if (Number(values.age) < 18) {\r\n        //       errors.age = 'Sorry, you must be at least 18 years old'\r\n        //     }\r\n        //     return errors\r\n        //   }\r\n          \r\n        //   const warn = () => {\r\n        //     const warnings = {}\r\n        //     if (values.age < 19) {\r\n        //       warnings.age = 'Hmm, you seem a bit young...'\r\n        //     }\r\n        //     return warnings\r\n        //   }\r\n        //  console.log(JSON.stringify(this.props.formValue))\r\n        return (\r\n            <div className=\"login-page\">\r\n                <div className=\"container-row\">\r\n                    <div span={10} className=\"first-div\">\r\n                        <Logo/>\r\n                    </div>\r\n                    <div span={10} className=\"second-div\">\r\n                        <LoginForm\r\n                        // handleSubmit={this.onSubmitForm}\r\n                        // inititalValue={this.props.login.initialFormData} \r\n                        required={this.required}\r\n                        onSubmit={this.onSubmit}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nconst mapStateToProps = (state) => {\r\n    const { login } = state;\r\n    return {\r\n        login,\r\n        formValue: getFormValues('login-form')(state),\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch => ({\r\n\r\n}))();\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(login);"]},"metadata":{},"sourceType":"module"}