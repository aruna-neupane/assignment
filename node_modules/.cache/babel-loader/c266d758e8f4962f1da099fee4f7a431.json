{"ast":null,"code":"// import React, { Component, Fragment } from 'react';\n// import { Row, Col } from 'antd';\n// import './../../assets/css/style.css';\n// import Logo from './../../modules/login/component/logo'\n// import LoginForm from './../../modules/login/component/form'\n// import logo from './../../assets/images/logo.png'\n// import { getFormValues, submit, SubmissionError } from 'redux-form';\n// import { connect } from 'react-redux';\n// class login extends Component {\n//     constructor(props) {\n//         super(props);\n//     }\n//     onSubmitForm = (values) => {\n//         console.log('Submitted values are: ', JSON.stringify(this.props.formValue));\n//         // const { pocketRemoteService, cookies } = this.props;\n//         // const { locale } = this.state;\n//         //   const { username, password } = params;\n//         //   const request = {\n//         //     clientId: CLIENT_ID,\n//         //     clientSecret: CLIENT_SECRET,\n//         //     username,\n//         //     password,\n//         //   };\n//         //   const loginInfo = {\n//         //     checked: this.state.checked,\n//         //     username: this.state.checked === false ? '' : this.state.username,\n//         //   };\n//         //   localStorage.setItem('login-info', JSON.stringify(loginInfo));\n//         //   this.props.ssoAuthenticate(pocketRemoteService, request, cookies, locale);\n//         };\n//          submit(values) {\n//             return sleep(1000).then(() => {\n//               // simulate server latency\n//               if (!['john', 'paul', 'george', 'ringo'].includes(values.username)) {\n//                 throw new SubmissionError({\n//                   username: 'User does not exist',\n//                   _error: 'Login failed!'\n//                 })\n//               } else if (values.password !== 'redux-form') {\n//                 throw new SubmissionError({\n//                   password: 'Wrong password',\n//                   _error: 'Login failed!'\n//                 })\n//               } else {\n//                 window.alert(`You submitted:\\n\\n${JSON.stringify(values, null, 2)}`)\n//               }\n//             })\n//           }\n//     render() {\n//         const values = this.props.formValue\n//         const validate = () => {\n//             const errors = {}\n//             if (!values.username) {\n//               errors.username = 'Required'\n//             } else if (values.username.length > 15) {\n//               errors.username = 'Must be 15 characters or less'\n//             }\n//             if (!values.email) {\n//               errors.email = 'Required'\n//             } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n//               errors.email = 'Invalid email address'\n//             }\n//             if (!values.age) {\n//               errors.age = 'Required'\n//             } else if (isNaN(Number(values.age))) {\n//               errors.age = 'Must be a number'\n//             } else if (Number(values.age) < 18) {\n//               errors.age = 'Sorry, you must be at least 18 years old'\n//             }\n//             return errors\n//           }\n//           const warn = () => {\n//             const warnings = {}\n//             if (values.age < 19) {\n//               warnings.age = 'Hmm, you seem a bit young...'\n//             }\n//             return warnings\n//           }\n//          console.log(JSON.stringify(this.props.formValue))\n//         return (\n//             <div className=\"login-page\">\n//                 <div className=\"container-row\">\n//                     <div span={10} className=\"first-div\">\n//                         <Logo/>\n//                     </div>\n//                     <div span={10} className=\"second-div\">\n//                         <LoginForm\n//                         handleSubmit={this.onSubmitForm}\n//                         inititalValue={this.props.login.initialFormData} \n//                         />\n//                     </div>\n//                 </div>\n//             </div>\n//         );\n//     }\n// }\n// const mapStateToProps = (state) => {\n//     const { login } = state;\n//     return {\n//         login,\n//         formValue: getFormValues('login-form')(state),\n//     };\n// };\n// const mapDispatchToProps = (dispatch => ({\n//     // navigate,\n//     // actionButtonSubmit,\n//     // change,\n//     // addBranch,\n//     // touch,\n//     // reset,\n//     // destroy,\n// }))();\n// export default connect(mapStateToProps, mapDispatchToProps)(login);","map":{"version":3,"sources":["D:/react-app/inspiring-lab-project/src/app/login/login.js"],"names":[],"mappingssourcesContent":["// import React, { Component, Fragment } from 'react';\r\n// import { Row, Col } from 'antd';\r\n// import './../../assets/css/style.css';\r\n// import Logo from './../../modules/login/component/logo'\r\n// import LoginForm from './../../modules/login/component/form'\r\n// import logo from './../../assets/images/logo.png'\r\n// import { getFormValues, submit, SubmissionError } from 'redux-form';\r\n// import { connect } from 'react-redux';\r\n\r\n// class login extends Component {\r\n//     constructor(props) {\r\n//         super(props);\r\n        \r\n//     }\r\n    \r\n//     onSubmitForm = (values) => {\r\n//         console.log('Submitted values are: ', JSON.stringify(this.props.formValue));\r\n//         // const { pocketRemoteService, cookies } = this.props;\r\n//         // const { locale } = this.state;\r\n//         //   const { username, password } = params;\r\n//         //   const request = {\r\n//         //     clientId: CLIENT_ID,\r\n//         //     clientSecret: CLIENT_SECRET,\r\n//         //     username,\r\n//         //     password,\r\n//         //   };\r\n    \r\n//         //   const loginInfo = {\r\n//         //     checked: this.state.checked,\r\n//         //     username: this.state.checked === false ? '' : this.state.username,\r\n//         //   };\r\n    \r\n//         //   localStorage.setItem('login-info', JSON.stringify(loginInfo));\r\n    \r\n//         //   this.props.ssoAuthenticate(pocketRemoteService, request, cookies, locale);\r\n//         };\r\n//          submit(values) {\r\n//             return sleep(1000).then(() => {\r\n//               // simulate server latency\r\n//               if (!['john', 'paul', 'george', 'ringo'].includes(values.username)) {\r\n//                 throw new SubmissionError({\r\n//                   username: 'User does not exist',\r\n//                   _error: 'Login failed!'\r\n//                 })\r\n//               } else if (values.password !== 'redux-form') {\r\n//                 throw new SubmissionError({\r\n//                   password: 'Wrong password',\r\n//                   _error: 'Login failed!'\r\n//                 })\r\n//               } else {\r\n//                 window.alert(`You submitted:\\n\\n${JSON.stringify(values, null, 2)}`)\r\n//               }\r\n//             })\r\n//           }\r\n//     render() {\r\n//         const values = this.props.formValue\r\n//         const validate = () => {\r\n//             const errors = {}\r\n//             if (!values.username) {\r\n//               errors.username = 'Required'\r\n//             } else if (values.username.length > 15) {\r\n//               errors.username = 'Must be 15 characters or less'\r\n//             }\r\n//             if (!values.email) {\r\n//               errors.email = 'Required'\r\n//             } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n//               errors.email = 'Invalid email address'\r\n//             }\r\n//             if (!values.age) {\r\n//               errors.age = 'Required'\r\n//             } else if (isNaN(Number(values.age))) {\r\n//               errors.age = 'Must be a number'\r\n//             } else if (Number(values.age) < 18) {\r\n//               errors.age = 'Sorry, you must be at least 18 years old'\r\n//             }\r\n//             return errors\r\n//           }\r\n          \r\n//           const warn = () => {\r\n//             const warnings = {}\r\n//             if (values.age < 19) {\r\n//               warnings.age = 'Hmm, you seem a bit young...'\r\n//             }\r\n//             return warnings\r\n//           }\r\n//          console.log(JSON.stringify(this.props.formValue))\r\n//         return (\r\n//             <div className=\"login-page\">\r\n//                 <div className=\"container-row\">\r\n//                     <div span={10} className=\"first-div\">\r\n//                         <Logo/>\r\n//                     </div>\r\n//                     <div span={10} className=\"second-div\">\r\n//                         <LoginForm\r\n//                         handleSubmit={this.onSubmitForm}\r\n//                         inititalValue={this.props.login.initialFormData} \r\n                        \r\n//                         />\r\n//                     </div>\r\n//                 </div>\r\n//             </div>\r\n//         );\r\n//     }\r\n// }\r\n// const mapStateToProps = (state) => {\r\n//     const { login } = state;\r\n//     return {\r\n//         login,\r\n//         formValue: getFormValues('login-form')(state),\r\n//     };\r\n// };\r\n\r\n// const mapDispatchToProps = (dispatch => ({\r\n//     // navigate,\r\n//     // actionButtonSubmit,\r\n//     // change,\r\n//     // addBranch,\r\n//     // touch,\r\n//     // reset,\r\n//     // destroy,\r\n// }))();\r\n\r\n// export default connect(mapStateToProps, mapDispatchToProps)(login);\r\n\r\n"]},"metadata":{},"sourceType":"module"}