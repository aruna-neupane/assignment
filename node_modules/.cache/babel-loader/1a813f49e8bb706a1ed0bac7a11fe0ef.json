{"ast":null,"code":"const startLoadingAction = () => ({\n  type: actionType.START_FETCH_DATA\n});\n\nconst finishLoadingAction = () => ({\n  type: actionType.FINISH_FETCH_DATA\n});\n\nconst setListData = payload => ({\n  type: actionType.SET_LIST_BRANCH,\n  payload\n});\n\nconst setDetailBranch = payload => ({\n  type: actionType.SET_DETAIL_BRANCH,\n  payload\n});\n/** ini sementara */\n\n\nexport const clearList = () => dispatch => {\n  dispatch(setListData([]));\n};\n/** ini sementara */\n\nexport const getListBranch = (service, params) => dispatch => new Promise((resolve, reject) => {\n  dispatch(startLoadingAction());\n  service.invoke('api/cenco/cenco/data/table', params, {\n    method: 'POST',\n    header: {\n      'Content-type': 'application/json'\n    },\n    APPS: APPS_BE\n  }).then(response => {\n    if (response.data.responseCode == 1000) {\n      const listBranch = response.data.response.filter(val => val.status === 'LIVE' && val.client_id === CLIENT_ID_TPE || val.status === 'INAU' && val.authoress && val.client_id === CLIENT_ID_TPE);\n      const listTempBranch = listBranch.map(item => {\n        return { ...item,\n          branch_name: `${item.branch_code} - ${item.name}`\n        };\n      });\n      resolve(listTempBranch);\n      dispatch(setListData(listTempBranch));\n      dispatch(finishLoadingAction());\n    } else {\n      dispatch(finishLoadingAction());\n      resolve([]);\n    }\n  }, error => {\n    dispatch(finishLoadingAction());\n    dispatch(showError(error.data.responseCode));\n    reject(error);\n  });\n});\nimport moment from 'moment';\nimport * as actionType from './branch-action-type';\nconst initialFormData = {\n  code: '',\n  branchName: '',\n  address: '',\n  address2: '',\n  city: '',\n  parent: ''\n};\nconst initialDetailFormData = {\n  code: 'B1121',\n  branchName: 'Anabatic Jakarta',\n  address: 'Jl.Gatot Subroto, Jakarta Selatan',\n  address2: 'Graha BIP',\n  city: 'Jakarta',\n  parent: {\n    id: 2,\n    description: 'B0123'\n  },\n  branchType: {\n    id: 0,\n    description: 'Branch Operation'\n  }\n};\nconst initialState = {\n  loading: false,\n  dataAdd: initialFormData,\n  dataEdit: initialDetailFormData,\n  listBranch: []\n};\n\nconst handler = currentState => {\n  const startLoading = () => ({ ...currentState,\n    loading: true\n  });\n\n  const finishLoading = () => ({ ...currentState,\n    loading: false\n  });\n\n  const setListBranch = payload => ({ ...currentState,\n    listBranch: payload\n  });\n\n  const setDetailBranch = payload => ({ ...currentState,\n    dataEdit: payload\n  });\n\n  return {\n    startLoading,\n    finishLoading,\n    setListBranch,\n    setDetailBranch\n  };\n};\n\nexport default ((state = initialState, action) => {\n  const {\n    payload,\n    type\n  } = action;\n\n  switch (type) {\n    case actionType.START_FETCH_DATA:\n      return handler(state).startLoading();\n\n    case actionType.FINISH_FETCH_DATA:\n      return handler(state).finishLoading();\n\n    case actionType.SET_LIST_BRANCH:\n      return handler(state).setListBranch(payload);\n\n    case actionType.SET_DETAIL_BRANCH:\n      return handler(state).setDetailBranch(payload);\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["D:/react-app/inspiring-lab-project/src/modules/login/store/reducer.js"],"names":["startLoadingAction","type","actionType","START_FETCH_DATA","finishLoadingAction","FINISH_FETCH_DATA","setListData","payload","SET_LIST_BRANCH","setDetailBranch","SET_DETAIL_BRANCH","clearList","dispatch","getListBranch","service","params","Promise","resolve","reject","invoke","method","header","APPS","APPS_BE","then","response","data","responseCode","listBranch","filter","val","status","client_id","CLIENT_ID_TPE","authoress","listTempBranch","map","item","branch_name","branch_code","name","error","showError","moment","initialFormData","code","branchName","address","address2","city","parent","initialDetailFormData","id","description","branchType","initialState","loading","dataAdd","dataEdit","handler","currentState","startLoading","finishLoading","setListBranch","state","action"],"mappings":"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","sourcesContent":["const startLoadingAction = () => ({\r\n    type: actionType.START_FETCH_DATA,\r\n});\r\nconst finishLoadingAction = () => ({\r\n    type: actionType.FINISH_FETCH_DATA,\r\n});\r\nconst setListData = payload => ({\r\n    type: actionType.SET_LIST_BRANCH,\r\n    payload,\r\n});\r\nconst setDetailBranch = payload => ({\r\n    type: actionType.SET_DETAIL_BRANCH,\r\n    payload,\r\n});\r\n\r\n/** ini sementara */\r\nexport const clearList = () => (dispatch) => {\r\n    dispatch(setListData([]));\r\n};\r\n/** ini sementara */\r\n\r\nexport const getListBranch = (service, params) => dispatch => new Promise((resolve, reject) => {\r\n    dispatch(startLoadingAction());\r\n    service.invoke(\r\n        'api/cenco/cenco/data/table',\r\n        params,\r\n        {\r\n            method: 'POST',\r\n            header: {\r\n                'Content-type': 'application/json',\r\n            },\r\n            APPS: APPS_BE,\r\n        },\r\n\r\n    ).then(\r\n        (response) => {\r\n            if (response.data.responseCode == 1000) {\r\n                const listBranch = response.data.response.filter(val => (val.status === 'LIVE' && val.client_id === CLIENT_ID_TPE) || (val.status === 'INAU' && val.authoress && val.client_id === CLIENT_ID_TPE));\r\n                const listTempBranch = listBranch.map((item) => {\r\n                    return {\r\n                        ...item,\r\n                        branch_name: `${item.branch_code} - ${item.name}`,\r\n                    };\r\n                });\r\n                resolve(listTempBranch);\r\n                dispatch(setListData(listTempBranch));\r\n                dispatch(finishLoadingAction());\r\n            } else {\r\n                dispatch(finishLoadingAction());\r\n                resolve([]);\r\n            }\r\n        },\r\n        (error) => {\r\n            dispatch(finishLoadingAction());\r\n            dispatch(showError(error.data.responseCode));\r\n            reject(error);\r\n        },\r\n    );\r\n});\r\n\r\nimport moment from 'moment';\r\nimport * as actionType from './branch-action-type';\r\n\r\nconst initialFormData = {\r\n    code: '',\r\n    branchName: '',\r\n    address: '',\r\n    address2: '',\r\n    city: '',\r\n    parent: '',\r\n};\r\n\r\nconst initialDetailFormData = {\r\n    code: 'B1121',\r\n    branchName: 'Anabatic Jakarta',\r\n    address: 'Jl.Gatot Subroto, Jakarta Selatan',\r\n    address2: 'Graha BIP',\r\n    city: 'Jakarta',\r\n    parent: { id: 2, description: 'B0123' },\r\n    branchType: { id: 0, description: 'Branch Operation' },\r\n};\r\n\r\nconst initialState = {\r\n    loading: false,\r\n    dataAdd: initialFormData,\r\n    dataEdit: initialDetailFormData,\r\n    listBranch: [],\r\n};\r\n\r\nconst handler = (currentState) => {\r\n    const startLoading = () => ({ ...currentState, loading: true });\r\n    const finishLoading = () => ({ ...currentState, loading: false });\r\n    const setListBranch = payload => ({ ...currentState, listBranch: payload });\r\n    const setDetailBranch = payload => ({ ...currentState, dataEdit: payload });\r\n    return {\r\n        startLoading,\r\n        finishLoading,\r\n        setListBranch,\r\n        setDetailBranch,\r\n    };\r\n};\r\n\r\nexport default (state = initialState, action) => {\r\n    const { payload, type } = action;\r\n    switch (type) {\r\n        case actionType.START_FETCH_DATA:\r\n            return handler(state).startLoading();\r\n        case actionType.FINISH_FETCH_DATA:\r\n            return handler(state).finishLoading();\r\n        case actionType.SET_LIST_BRANCH:\r\n            return handler(state).setListBranch(payload);\r\n        case actionType.SET_DETAIL_BRANCH:\r\n            return handler(state).setDetailBranch(payload);\r\n        default:\r\n            return state;\r\n    }\r\n};"]},"metadata":{},"sourceType":"module"}