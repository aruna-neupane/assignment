{"ast":null,"code":"import { NotificationError } from \"../../../common/component/notificationError\";\nimport * as actionType from './action-type';\nimport axios from 'axios';\n\nconst setUser = payload => ({\n  type: actionType.USER_DATA,\n  payload\n});\n\nconst setList = payload => ({\n  type: actionType.USER_LIST,\n  payload\n});\n\nconst setTitle = payload => ({\n  type: actionType.SET_PAGE,\n  payload\n});\n\nexport const getUser = id => dispatch => new Promise((resolve, reject) => {\n  // dispatch(startLoadingAction());\n  // let res=[];\n  //     let list=[];\n  //     axios.get('https://panorbit.in/api/users.json')\n  //     .then((response) => {  \n  //     list= response.data.users.filter(item => item.id != this.props.match.params.id)  \n  //     res = response.data.users.filter(item => item.id == this.props.match.params.id)\n  //     const data= res[0]\n  //     resolve(data, list)\n  //     }),\n  //     (error) => {\n  //         // dispatch(finishLoadingAction());\n  //         dispatch(NotificationError());\n  //         reject(error);\n  //     }\n  axios.get(\"https://panorbit.in/api/users.json\").then(response => {\n    let res = [];\n    let list = [];\n    list = response.data.users.filter(item => item.id != id);\n    res = response.data.users.filter(item => item.id == id);\n    dispatch(setList(list));\n    dispatch(setUser(res));\n    resolve(list, res);\n  }, error => {\n    alert(error);\n    reject();\n  });\n});\nexport const getTitle = params => dispatch => new Promise((resolve, reject) => {\n  // dispatch(startLoadingAction());\n  let res = [];\n  let list = [];\n  axios.get('https://panorbit.in/api/users.json', params).then(response => {\n    list = response.data.users.filter(item => item.id != this.props.match.params.id);\n    res = response.data.users.filter(item => item.id == this.props.match.params.id);\n  }).then(() => {\n    this.setState({\n      data: res[0],\n      list\n    });\n  }), error => {\n    // dispatch(finishLoadingAction());\n    dispatch(NotificationError());\n    reject(error);\n  };\n});","map":{"version":3,"sources":["D:/react-app/inspiring-lab-project/src/modules/home/store/action.js"],"names":["NotificationError","actionType","axios","setUser","payload","type","USER_DATA","setList","USER_LIST","setTitle","SET_PAGE","getUser","id","dispatch","Promise","resolve","reject","get","then","response","res","list","data","users","filter","item","error","alert","getTitle","params","props","match","setState"],"mappings":"AAAA,SAASA,iBAAT,QAAkC,6CAAlC;AACA,OAAO,KAAKC,UAAZ,MAA4B,eAA5B;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,OAAO,GAAGC,OAAO,KAAK;AACxBC,EAAAA,IAAI,EAAEJ,UAAU,CAACK,SADO;AAExBF,EAAAA;AAFwB,CAAL,CAAvB;;AAIA,MAAMG,OAAO,GAAGH,OAAO,KAAK;AACxBC,EAAAA,IAAI,EAAEJ,UAAU,CAACO,SADO;AAExBJ,EAAAA;AAFwB,CAAL,CAAvB;;AAKA,MAAMK,QAAQ,GAAGL,OAAO,KAAK;AACzBC,EAAAA,IAAI,EAAEJ,UAAU,CAACS,QADQ;AAEzBN,EAAAA;AAFyB,CAAL,CAAxB;;AAKA,OAAO,MAAMO,OAAO,GAAIC,EAAD,IAAQC,QAAQ,IACvC,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACId,EAAAA,KAAK,CAACe,GAAN,CAAU,oCAAV,EAAgDC,IAAhD,CACGC,QAAD,IAAc;AACZ,QAAIC,GAAG,GAAC,EAAR;AACA,QAAIC,IAAI,GAAC,EAAT;AACAA,IAAAA,IAAI,GAAEF,QAAQ,CAACG,IAAT,CAAcC,KAAd,CAAoBC,MAApB,CAA2BC,IAAI,IAAIA,IAAI,CAACb,EAAL,IAAWA,EAA9C,CAAN;AACAQ,IAAAA,GAAG,GAAGD,QAAQ,CAACG,IAAT,CAAcC,KAAd,CAAoBC,MAApB,CAA2BC,IAAI,IAAIA,IAAI,CAACb,EAAL,IAAWA,EAA9C,CAAN;AACAC,IAAAA,QAAQ,CAACN,OAAO,CAACc,IAAD,CAAR,CAAR;AACAR,IAAAA,QAAQ,CAACV,OAAO,CAACiB,GAAD,CAAR,CAAR;AACAL,IAAAA,OAAO,CAACM,IAAD,EAAOD,GAAP,CAAP;AACD,GATH,EAUGM,KAAD,IAAW;AACTC,IAAAA,KAAK,CAACD,KAAD,CAAL;AACAV,IAAAA,MAAM;AACP,GAbH;AAeH,CA/BL,CADO;AAkCP,OAAO,MAAMY,QAAQ,GAAIC,MAAD,IAAYhB,QAAQ,IAAI,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC7E;AACA,MAAII,GAAG,GAAC,EAAR;AACI,MAAIC,IAAI,GAAC,EAAT;AACAnB,EAAAA,KAAK,CAACe,GAAN,CACI,oCADJ,EAEIY,MAFJ,EAICX,IAJD,CAIOC,QAAD,IAAc;AACpBE,IAAAA,IAAI,GAAEF,QAAQ,CAACG,IAAT,CAAcC,KAAd,CAAoBC,MAApB,CAA2BC,IAAI,IAAIA,IAAI,CAACb,EAAL,IAAW,KAAKkB,KAAL,CAAWC,KAAX,CAAiBF,MAAjB,CAAwBjB,EAAtE,CAAN;AACAQ,IAAAA,GAAG,GAAGD,QAAQ,CAACG,IAAT,CAAcC,KAAd,CAAoBC,MAApB,CAA2BC,IAAI,IAAIA,IAAI,CAACb,EAAL,IAAW,KAAKkB,KAAL,CAAWC,KAAX,CAAiBF,MAAjB,CAAwBjB,EAAtE,CAAN;AACC,GAPD,EAOGM,IAPH,CAOQ,MAAI;AACR,SAAKc,QAAL,CAAc;AACVV,MAAAA,IAAI,EAAEF,GAAG,CAAC,CAAD,CADC;AAEVC,MAAAA;AAFU,KAAd;AAIH,GAZD,GAaCK,KAAD,IAAW;AACP;AACAb,IAAAA,QAAQ,CAACb,iBAAiB,EAAlB,CAAR;AACAgB,IAAAA,MAAM,CAACU,KAAD,CAAN;AACH,GAjBD;AAkBP,CAtB+C,CAAzC","sourcesContent":["import { NotificationError } from \"../../../common/component/notificationError\";\r\nimport * as actionType from './action-type'\r\nimport axios from 'axios';\r\n\r\nconst setUser = payload => ({\r\n    type: actionType.USER_DATA,\r\n    payload,\r\n  });\r\nconst setList = payload => ({\r\n    type: actionType.USER_LIST,\r\n    payload,\r\n})\r\n\r\nconst setTitle = payload => ({\r\n    type: actionType.SET_PAGE,\r\n    payload,\r\n  });\r\n\r\nexport const getUser = (id) => dispatch => \r\nnew Promise((resolve, reject) => {\r\n    // dispatch(startLoadingAction());\r\n    // let res=[];\r\n    //     let list=[];\r\n    //     axios.get('https://panorbit.in/api/users.json')\r\n    //     .then((response) => {  \r\n    //     list= response.data.users.filter(item => item.id != this.props.match.params.id)  \r\n    //     res = response.data.users.filter(item => item.id == this.props.match.params.id)\r\n    //     const data= res[0]\r\n    //     resolve(data, list)\r\n    //     }),\r\n    //     (error) => {\r\n    //         // dispatch(finishLoadingAction());\r\n    //         dispatch(NotificationError());\r\n    //         reject(error);\r\n    //     }\r\n        axios.get(\"https://panorbit.in/api/users.json\").then(\r\n          (response) => {\r\n            let res=[];\r\n            let list=[];\r\n            list= response.data.users.filter(item => item.id != id)  \r\n            res = response.data.users.filter(item => item.id == id)\r\n            dispatch(setList(list));\r\n            dispatch(setUser(res))\r\n            resolve(list, res);\r\n          },\r\n          (error) => {\r\n            alert(error);\r\n            reject();\r\n          }\r\n        );\r\n    });\r\n\r\nexport const getTitle = (params) => dispatch => new Promise((resolve, reject) => {\r\n    // dispatch(startLoadingAction());\r\n    let res=[];\r\n        let list=[];\r\n        axios.get(\r\n            'https://panorbit.in/api/users.json',\r\n            params\r\n            )\r\n        .then((response) => {  \r\n        list= response.data.users.filter(item => item.id != this.props.match.params.id)  \r\n        res = response.data.users.filter(item => item.id == this.props.match.params.id)\r\n        }).then(()=>{\r\n            this.setState({\r\n                data: res[0],\r\n                list,\r\n            })\r\n        }),\r\n        (error) => {\r\n            // dispatch(finishLoadingAction());\r\n            dispatch(NotificationError());\r\n            reject(error);\r\n        }\r\n});"]},"metadata":{},"sourceType":"module"}