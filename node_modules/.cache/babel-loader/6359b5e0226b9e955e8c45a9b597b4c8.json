{"ast":null,"code":"var _jsxFileName = \"D:\\\\react-app\\\\inspiring-lab-project\\\\src\\\\app\\\\login\\\\login.js\";\n// import React, { Component, Fragment } from 'react';\n// import { Row, Col } from 'antd';\n// import './../../assets/css/style.css';\n// import Logo from './../../modules/login/component/logo'\n// import LoginForm from './../../modules/login/component/form'\n// import logo from './../../assets/images/logo.png'\n// import { getFormValues, submit } from 'redux-form';\n// import { connect } from 'react-redux';\n// class login extends Component {\n//     constructor(props) {\n//         super(props);\n//     }\n//     onSubmitForm = (values) => {\n//         console.log('Submitted values are: ', JSON.stringify(this.props.formValue));\n//         // const { pocketRemoteService, cookies } = this.props;\n//         // const { locale } = this.state;\n//         //   const { username, password } = params;\n//         //   const request = {\n//         //     clientId: CLIENT_ID,\n//         //     clientSecret: CLIENT_SECRET,\n//         //     username,\n//         //     password,\n//         //   };\n//         //   const loginInfo = {\n//         //     checked: this.state.checked,\n//         //     username: this.state.checked === false ? '' : this.state.username,\n//         //   };\n//         //   localStorage.setItem('login-info', JSON.stringify(loginInfo));\n//         //   this.props.ssoAuthenticate(pocketRemoteService, request, cookies, locale);\n//         };\n//     render() {\n//         const values = this.props.formValue\n//         const validate = () => {\n//             const errors = {}\n//             if (!values.username) {\n//               errors.username = 'Required'\n//             } else if (values.username.length > 15) {\n//               errors.username = 'Must be 15 characters or less'\n//             }\n//             if (!values.email) {\n//               errors.email = 'Required'\n//             } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n//               errors.email = 'Invalid email address'\n//             }\n//             if (!values.age) {\n//               errors.age = 'Required'\n//             } else if (isNaN(Number(values.age))) {\n//               errors.age = 'Must be a number'\n//             } else if (Number(values.age) < 18) {\n//               errors.age = 'Sorry, you must be at least 18 years old'\n//             }\n//             return errors\n//           }\n//           const warn = () => {\n//             const warnings = {}\n//             if (values.age < 19) {\n//               warnings.age = 'Hmm, you seem a bit young...'\n//             }\n//             return warnings\n//           }\n//          console.log(JSON.stringify(this.props.formValue))\n//         return (\n//             <div className=\"login-page\">\n//                 <div className=\"container-row\">\n//                     <div span={10} className=\"first-div\">\n//                         <Logo/>\n//                     </div>\n//                     <div span={10} className=\"second-div\">\n//                         <LoginForm\n//                         handleSubmit={this.onSubmitForm}\n//                         inititalValue={this.props.login.initialFormData} \n//                         validate={validate}\n//                         warn={warn}\n//                         />\n//                     </div>\n//                 </div>\n//             </div>\n//         );\n//     }\n// }\n// const mapStateToProps = (state) => {\n//     const { login } = state;\n//     return {\n//         login,\n//         formValue: getFormValues('login-form')(state),\n//     };\n// };\n// const mapDispatchToProps = (dispatch => ({\n//     // navigate,\n//     // actionButtonSubmit,\n//     // change,\n//     // addBranch,\n//     // touch,\n//     // reset,\n//     // destroy,\n// }))();\n// export default connect(mapStateToProps, mapDispatchToProps)(login);\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'antd/dist/antd.css';\nimport './index.css';\nimport { Form, Input, Button, Checkbox } from 'antd';\nimport { LockOutlined, us } from '@ant-design/icons';\n\nclass NormalLoginForm extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.handleSubmit = e => {\n      e.preventDefault();\n      this.props.form.validateFields((err, values) => {\n        if (!err) {\n          console.log('Received values of form: ', values);\n        }\n      });\n    };\n  }\n\n  render() {\n    const {\n      getFieldDecorator\n    } = this.props.form;\n    return /*#__PURE__*/React.createElement(Form, {\n      onSubmit: this.handleSubmit,\n      className: \"login-form\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Form.Item, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }\n    }, getFieldDecorator('username', {\n      rules: [{\n        required: true,\n        message: 'Please input your username!'\n      }]\n    })( /*#__PURE__*/React.createElement(Input, {\n      prefix: /*#__PURE__*/React.createElement(UserOutlined, {\n        type: \"user\",\n        style: {\n          color: 'rgba(0,0,0,.25)'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 23\n        }\n      }),\n      placeholder: \"Username\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 13\n      }\n    }))), /*#__PURE__*/React.createElement(Form.Item, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }\n    }, getFieldDecorator('password', {\n      rules: [{\n        required: true,\n        message: 'Please input your Password!'\n      }]\n    })( /*#__PURE__*/React.createElement(Input, {\n      prefix: /*#__PURE__*/React.createElement(LockOutlined, {\n        style: {\n          color: 'rgba(0,0,0,.25)'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 23\n        }\n      }),\n      type: \"password\",\n      placeholder: \"Password\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 13\n      }\n    }))), /*#__PURE__*/React.createElement(Form.Item, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 9\n      }\n    }, getFieldDecorator('remember', {\n      valuePropName: 'checked',\n      initialValue: true\n    })( /*#__PURE__*/React.createElement(Checkbox, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 14\n      }\n    }, \"Remember me\")), /*#__PURE__*/React.createElement(\"a\", {\n      className: \"login-form-forgot\",\n      href: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 11\n      }\n    }, \"Forgot password\"), /*#__PURE__*/React.createElement(Button, {\n      type: \"primary\",\n      htmlType: \"submit\",\n      className: \"login-form-button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 11\n      }\n    }, \"Log in\"), \"Or \", /*#__PURE__*/React.createElement(\"a\", {\n      href: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 14\n      }\n    }, \"register now!\")));\n  }\n\n}\n\nexport default Form.create({\n  name: 'normal_login'\n})(NormalLoginForm);","map":{"version":3,"sources":["D:/react-app/inspiring-lab-project/src/app/login/login.js"],"names":["React","ReactDOM","Form","Input","Button","Checkbox","LockOutlined","us","NormalLoginForm","Component","handleSubmit","e","preventDefault","props","form","validateFields","err","values","console","log","render","getFieldDecorator","rules","required","message","color","valuePropName","initialValue","create","name"],"mappings":"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","sourcesContent":["// import React, { Component, Fragment } from 'react';\r\n// import { Row, Col } from 'antd';\r\n// import './../../assets/css/style.css';\r\n// import Logo from './../../modules/login/component/logo'\r\n// import LoginForm from './../../modules/login/component/form'\r\n// import logo from './../../assets/images/logo.png'\r\n// import { getFormValues, submit } from 'redux-form';\r\n// import { connect } from 'react-redux';\r\n\r\n// class login extends Component {\r\n//     constructor(props) {\r\n//         super(props);\r\n        \r\n//     }\r\n    \r\n//     onSubmitForm = (values) => {\r\n//         console.log('Submitted values are: ', JSON.stringify(this.props.formValue));\r\n//         // const { pocketRemoteService, cookies } = this.props;\r\n//         // const { locale } = this.state;\r\n//         //   const { username, password } = params;\r\n//         //   const request = {\r\n//         //     clientId: CLIENT_ID,\r\n//         //     clientSecret: CLIENT_SECRET,\r\n//         //     username,\r\n//         //     password,\r\n//         //   };\r\n    \r\n//         //   const loginInfo = {\r\n//         //     checked: this.state.checked,\r\n//         //     username: this.state.checked === false ? '' : this.state.username,\r\n//         //   };\r\n    \r\n//         //   localStorage.setItem('login-info', JSON.stringify(loginInfo));\r\n    \r\n//         //   this.props.ssoAuthenticate(pocketRemoteService, request, cookies, locale);\r\n//         };\r\n//     render() {\r\n//         const values = this.props.formValue\r\n//         const validate = () => {\r\n//             const errors = {}\r\n//             if (!values.username) {\r\n//               errors.username = 'Required'\r\n//             } else if (values.username.length > 15) {\r\n//               errors.username = 'Must be 15 characters or less'\r\n//             }\r\n//             if (!values.email) {\r\n//               errors.email = 'Required'\r\n//             } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n//               errors.email = 'Invalid email address'\r\n//             }\r\n//             if (!values.age) {\r\n//               errors.age = 'Required'\r\n//             } else if (isNaN(Number(values.age))) {\r\n//               errors.age = 'Must be a number'\r\n//             } else if (Number(values.age) < 18) {\r\n//               errors.age = 'Sorry, you must be at least 18 years old'\r\n//             }\r\n//             return errors\r\n//           }\r\n          \r\n//           const warn = () => {\r\n//             const warnings = {}\r\n//             if (values.age < 19) {\r\n//               warnings.age = 'Hmm, you seem a bit young...'\r\n//             }\r\n//             return warnings\r\n//           }\r\n//          console.log(JSON.stringify(this.props.formValue))\r\n//         return (\r\n//             <div className=\"login-page\">\r\n//                 <div className=\"container-row\">\r\n//                     <div span={10} className=\"first-div\">\r\n//                         <Logo/>\r\n//                     </div>\r\n//                     <div span={10} className=\"second-div\">\r\n//                         <LoginForm\r\n//                         handleSubmit={this.onSubmitForm}\r\n//                         inititalValue={this.props.login.initialFormData} \r\n//                         validate={validate}\r\n//                         warn={warn}\r\n//                         />\r\n//                     </div>\r\n//                 </div>\r\n//             </div>\r\n//         );\r\n//     }\r\n// }\r\n// const mapStateToProps = (state) => {\r\n//     const { login } = state;\r\n//     return {\r\n//         login,\r\n//         formValue: getFormValues('login-form')(state),\r\n//     };\r\n// };\r\n\r\n// const mapDispatchToProps = (dispatch => ({\r\n//     // navigate,\r\n//     // actionButtonSubmit,\r\n//     // change,\r\n//     // addBranch,\r\n//     // touch,\r\n//     // reset,\r\n//     // destroy,\r\n// }))();\r\n\r\n// export default connect(mapStateToProps, mapDispatchToProps)(login);\r\n\r\n\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'antd/dist/antd.css';\r\nimport './index.css';\r\nimport { Form, Input, Button, Checkbox } from 'antd';\r\nimport { LockOutlined, us } from '@ant-design/icons';\r\n\r\nclass NormalLoginForm extends React.Component {\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n    this.props.form.validateFields((err, values) => {\r\n      if (!err) {\r\n        console.log('Received values of form: ', values);\r\n      }\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { getFieldDecorator } = this.props.form;\r\n    return (\r\n      <Form onSubmit={this.handleSubmit} className=\"login-form\">\r\n        <Form.Item>\r\n          {getFieldDecorator('username', {\r\n            rules: [{ required: true, message: 'Please input your username!' }],\r\n          })(\r\n            <Input\r\n              prefix={<UserOutlined type=\"user\" style={{ color: 'rgba(0,0,0,.25)' }} />}\r\n              placeholder=\"Username\"\r\n            />,\r\n          )}\r\n        </Form.Item>\r\n        <Form.Item>\r\n          {getFieldDecorator('password', {\r\n            rules: [{ required: true, message: 'Please input your Password!' }],\r\n          })(\r\n            <Input\r\n              prefix={<LockOutlined style={{ color: 'rgba(0,0,0,.25)' }} />}\r\n              type=\"password\"\r\n              placeholder=\"Password\"\r\n            />,\r\n          )}\r\n        </Form.Item>\r\n        <Form.Item>\r\n          {getFieldDecorator('remember', {\r\n            valuePropName: 'checked',\r\n            initialValue: true,\r\n          })(<Checkbox>Remember me</Checkbox>)}\r\n          <a className=\"login-form-forgot\" href=\"\">\r\n            Forgot password\r\n          </a>\r\n          <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\r\n            Log in\r\n          </Button>\r\n          Or <a href=\"\">register now!</a>\r\n        </Form.Item>\r\n      </Form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Form.create({ name: 'normal_login' })(NormalLoginForm);\r\n\r\n"]},"metadata":{},"sourceType":"module"}