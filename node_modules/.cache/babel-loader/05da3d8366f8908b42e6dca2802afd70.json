{"ast":null,"code":"var _jsxFileName = \"D:\\\\react-app\\\\inspiring-lab-project\\\\src\\\\modules\\\\login\\\\component\\\\form.js\";\nimport React, { Component } from 'react';\nimport { Field, reduxForm, p } from 'redux-form';\nimport logo1 from './../../../assets/images/logo.png';\nimport { Form, Input, Button, Checkbox } from 'antd';\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\n\nclass LoginForm extends Component {\n  render() {\n    const validate = values => {\n      const errors = {};\n\n      if (!values.username) {\n        errors.username = 'Required';\n      } else if (values.username.length > 15) {\n        errors.username = 'Must be 15 characters or less';\n      }\n\n      if (!values.email) {\n        errors.email = 'Required';\n      } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n        errors.email = 'Invalid email address';\n      }\n\n      if (!values.age) {\n        errors.age = 'Required';\n      } else if (isNaN(Number(values.age))) {\n        errors.age = 'Must be a number';\n      } else if (Number(values.age) < 18) {\n        errors.age = 'Sorry, you must be at least 18 years old';\n      }\n\n      return errors;\n    };\n\n    const warn = values => {\n      const warnings = {};\n\n      if (values.age < 19) {\n        warnings.age = 'Hmm, you seem a bit young...';\n      }\n\n      return warnings;\n    };\n\n    const renderField = ({\n      input,\n      label,\n      type,\n      meta: {\n        touched,\n        error,\n        warning\n      }\n    }) => /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 11\n      }\n    }, label), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", Object.assign({}, input, {\n      placeholder: label,\n      type: type,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 13\n      }\n    })), touched && (error && /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 26\n      }\n    }, error) || warning && /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 29\n      }\n    }, warning))));\n\n    const {\n      handleSubmit,\n      initialValue\n    } = this.props;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }\n    }, \"const \", (handleSubmit, pristine, reset, submitting), \" = props return (\", /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(Field, {\n      name: \"username\",\n      type: \"text\",\n      component: renderField,\n      label: \"Username\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 7\n      }\n    }), /*#__PURE__*/React.createElement(Field, {\n      name: \"email\",\n      type: \"email\",\n      component: renderField,\n      label: \"Email\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 7\n      }\n    }), /*#__PURE__*/React.createElement(Field, {\n      name: \"age\",\n      type: \"number\",\n      component: renderField,\n      label: \"Age\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 7\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      type: \"submit\",\n      disabled: submitting,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }\n    }, \"Submit\"), /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      disabled: pristine || submitting,\n      onClick: reset,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }\n    }, \"Clear Values\"))));\n  }\n\n}\n\nLoginForm = reduxForm({\n  // a unique name for the form\n  form: 'login-form'\n})(LoginForm);\nexport default LoginForm;","map":{"version":3,"sources":["D:/react-app/inspiring-lab-project/src/modules/login/component/form.js"],"names":["React","Component","Field","reduxForm","p","logo1","Form","Input","Button","Checkbox","UserOutlined","LockOutlined","LoginForm","render","validate","values","errors","username","length","email","test","age","isNaN","Number","warn","warnings","renderField","input","label","type","meta","touched","error","warning","handleSubmit","initialValue","props","pristine","reset","submitting","form"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Field, reduxForm, p } from 'redux-form'\r\nimport logo1 from './../../../assets/images/logo.png';\r\nimport { Form, Input, Button, Checkbox } from 'antd';\r\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\r\n\r\n\r\nclass LoginForm extends Component {\r\n  \r\n    render() {\r\n      const validate = values => {\r\n        const errors = {}\r\n        if (!values.username) {\r\n          errors.username = 'Required'\r\n        } else if (values.username.length > 15) {\r\n          errors.username = 'Must be 15 characters or less'\r\n        }\r\n        if (!values.email) {\r\n          errors.email = 'Required'\r\n        } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n          errors.email = 'Invalid email address'\r\n        }\r\n        if (!values.age) {\r\n          errors.age = 'Required'\r\n        } else if (isNaN(Number(values.age))) {\r\n          errors.age = 'Must be a number'\r\n        } else if (Number(values.age) < 18) {\r\n          errors.age = 'Sorry, you must be at least 18 years old'\r\n        }\r\n        return errors\r\n      }\r\n      \r\n      const warn = values => {\r\n        const warnings = {}\r\n        if (values.age < 19) {\r\n          warnings.age = 'Hmm, you seem a bit young...'\r\n        }\r\n        return warnings\r\n      }\r\n      \r\n      const renderField = ({\r\n        input,\r\n        label,\r\n        type,\r\n        meta: { touched, error, warning }\r\n      }) => (\r\n        <div>\r\n          <label>{label}</label>\r\n          <div>\r\n            <input {...input} placeholder={label} type={type} />\r\n            {touched &&\r\n              ((error && <span>{error}</span>) ||\r\n                (warning && <span>{warning}</span>))}\r\n          </div>\r\n        </div>\r\n      )\r\n        const { handleSubmit, initialValue } = this.props\r\n    return (\r\n        <div>\r\n      {/* <form onSubmit={handleSubmit}>\r\n        <div>\r\n          <label htmlFor=\"firstName\">First Name</label>\r\n          <Field name=\"firstName\" component=\"input\" type=\"text\" />\r\n        </div>\r\n        <div>\r\n          <label htmlFor=\"lastName\">Last Name</label>\r\n          <Field name=\"lastName\" component=\"input\" type=\"text\" />\r\n        </div>\r\n        <div>\r\n          <label htmlFor=\"email\">Email</label>\r\n          <Field name=\"email\" component=\"input\" type=\"email\" />\r\n        </div>\r\n        <button type=\"submit\">Submit</button>\r\n      </form>\r\n       */}\r\n       const { handleSubmit, pristine, reset, submitting } = props\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <Field\r\n        name=\"username\"\r\n        type=\"text\"\r\n        component={renderField}\r\n        label=\"Username\"\r\n      />\r\n      <Field name=\"email\" type=\"email\" component={renderField} label=\"Email\" />\r\n      <Field name=\"age\" type=\"number\" component={renderField} label=\"Age\" />\r\n      <div>\r\n        <button type=\"submit\" disabled={submitting}>\r\n          Submit\r\n        </button>\r\n        <button type=\"button\" disabled={pristine || submitting} onClick={reset}>\r\n          Clear Values\r\n        </button>\r\n      </div>\r\n    </form>\r\n      {/* <Form\r\n      formId=\"login-form\"\r\n      name=\"login-form\"\r\n      className=\"login-form1\"\r\n      initialValues={{\r\n        remember: true,\r\n        firstName: ''\r\n      }}\r\n      onFinish={handleSubmit}\r\n    >\r\n      <Form.Item\r\n        name=\"firstName\"\r\n        rules={[\r\n          {\r\n            required: true,\r\n            message: 'Please input your Username!',\r\n          },\r\n        ]}\r\n      >\r\n        <Input prefix={<UserOutlined className=\"site-form-item-icon\" value={initialValue && initialValue.firstName? initialValue.firstName : \"\"}/>} placeholder=\"Username\" />\r\n      </Form.Item>\r\n      <Form.Item\r\n        name=\"password\"\r\n        rules={[\r\n          {\r\n            required: true,\r\n            message: 'Please input your Password!',\r\n          },\r\n        ]}\r\n      >\r\n        <Input\r\n          prefix={<LockOutlined className=\"site-form-item-icon\" />}\r\n          type=\"password\"\r\n          placeholder=\"Password\"\r\n        />\r\n      </Form.Item>\r\n      <Form.Item>\r\n        <Form.Item name=\"remember\" valuePropName=\"checked\" noStyle>\r\n          <Checkbox>Remember me</Checkbox>\r\n        </Form.Item>\r\n\r\n        <a className=\"login-form-forgot\" href=\"\">\r\n          Forgot password\r\n        </a>\r\n      </Form.Item>\r\n\r\n      <Form.Item>\r\n        <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\r\n          Log in\r\n        </Button>\r\n        Or <a href=\"\">register now!</a>\r\n      </Form.Item>\r\n    </Form> */}\r\n    </div>\r\n    )\r\n}\r\n}\r\nLoginForm = reduxForm({\r\n    // a unique name for the form\r\n    form: 'login-form'\r\n  })(LoginForm)\r\n\r\nexport default LoginForm;"]},"metadata":{},"sourceType":"module"}